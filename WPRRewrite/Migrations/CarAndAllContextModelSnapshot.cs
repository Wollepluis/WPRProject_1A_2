// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WPRRewrite;

#nullable disable

namespace WPRRewrite.Migrations
{
    [DbContext(typeof(CarAndAllContext))]
    partial class CarAndAllContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WPRRewrite.Modellen.Accounts.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wachtwoord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");

                    b.HasDiscriminator().HasValue("Account");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Adres", b =>
                {
                    b.Property<int>("AdresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdresId"));

                    b.Property<string>("Gemeente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Huisnummer")
                        .HasColumnType("int");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Straatnaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Woonplaats")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdresId");

                    b.ToTable("Adressen");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Bedrijf", b =>
                {
                    b.Property<int>("BedrijfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BedrijfId"));

                    b.Property<int>("BedrijfAdres")
                        .HasColumnType("int");

                    b.Property<string>("Bedrijfsnaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domeinnaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KvkNummer")
                        .HasColumnType("int");

                    b.HasKey("BedrijfId");

                    b.ToTable("Bedrijven");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Voertuig", b =>
                {
                    b.Property<int>("VoertuigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoertuigId"));

                    b.Property<int>("Aanschafjaar")
                        .HasColumnType("int");

                    b.Property<string>("Kenteken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kleur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Merk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Prijs")
                        .HasColumnType("int");

                    b.Property<int>("TypeVoertuig")
                        .HasColumnType("int");

                    b.HasKey("VoertuigId");

                    b.ToTable("Voertuigen");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Accounts.AccountMedewerker", b =>
                {
                    b.HasBaseType("WPRRewrite.Modellen.Accounts.Account");

                    b.HasDiscriminator().HasValue("AccountMedewerker");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Accounts.AccountParticulier", b =>
                {
                    b.HasBaseType("WPRRewrite.Modellen.Accounts.Account");

                    b.Property<int>("Account")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParticulierAccountId")
                        .HasColumnType("int");

                    b.Property<int>("ParticulierAdres")
                        .HasColumnType("int");

                    b.Property<int>("Telefoonnummer")
                        .HasColumnType("int");

                    b.ToTable("Accounts", t =>
                        {
                            t.Property("Account")
                                .HasColumnName("AccountParticulier_Account");
                        });

                    b.HasDiscriminator().HasValue("AccountParticulier");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Accounts.AccountZakelijk", b =>
                {
                    b.HasBaseType("WPRRewrite.Modellen.Accounts.Account");

                    b.Property<int>("BedrijfsId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("AccountZakelijk");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Accounts.AccountMedewerkerBackoffice", b =>
                {
                    b.HasBaseType("WPRRewrite.Modellen.Accounts.AccountMedewerker");

                    b.Property<int>("Account")
                        .HasColumnType("int");

                    b.Property<int>("AccountMedewerkerBackOfficeId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("AccountMedewerkerBackoffice");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Accounts.AccountMedewerkerFrontoffice", b =>
                {
                    b.HasBaseType("WPRRewrite.Modellen.Accounts.AccountMedewerker");

                    b.Property<int>("Account")
                        .HasColumnType("int");

                    b.Property<int>("AccountMedewerkerFrontofficeId")
                        .HasColumnType("int");

                    b.ToTable("Accounts", t =>
                        {
                            t.Property("Account")
                                .HasColumnName("AccountMedewerkerFrontoffice_Account");
                        });

                    b.HasDiscriminator().HasValue("AccountMedewerkerFrontoffice");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Accounts.AccountZakelijkBeheerder", b =>
                {
                    b.HasBaseType("WPRRewrite.Modellen.Accounts.AccountZakelijk");

                    b.Property<int>("Account")
                        .HasColumnType("int");

                    b.Property<int>("AccountZakelijkBeheerderId")
                        .HasColumnType("int");

                    b.ToTable("Accounts", t =>
                        {
                            t.Property("Account")
                                .HasColumnName("AccountZakelijkBeheerder_Account");
                        });

                    b.HasDiscriminator().HasValue("AccountZakelijkBeheerder");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Accounts.AccountZakelijkHuurder", b =>
                {
                    b.HasBaseType("WPRRewrite.Modellen.Accounts.AccountZakelijk");

                    b.Property<int>("Account")
                        .HasColumnType("int");

                    b.Property<int>("AccountZakelijkHuurderId")
                        .HasColumnType("int");

                    b.ToTable("Accounts", t =>
                        {
                            t.Property("Account")
                                .HasColumnName("AccountZakelijkHuurder_Account");
                        });

                    b.HasDiscriminator().HasValue("AccountZakelijkHuurder");
                });
#pragma warning restore 612, 618
        }
    }
}
