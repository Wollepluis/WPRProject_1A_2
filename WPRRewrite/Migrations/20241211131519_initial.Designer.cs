// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WPRRewrite;

#nullable disable

namespace WPRRewrite.Migrations
{
    [DbContext(typeof(CarAndAllContext))]
    [Migration("20241211131519_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ReserveringVoertuig", b =>
                {
                    b.Property<int>("GereserveerdeVoertuigenVoertuigId")
                        .HasColumnType("int");

                    b.Property<int>("ReserveringenReserveringId")
                        .HasColumnType("int");

                    b.HasKey("GereserveerdeVoertuigenVoertuigId", "ReserveringenReserveringId");

                    b.HasIndex("ReserveringenReserveringId");

                    b.ToTable("ReserveringVoertuig");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Abonnementen.Abonnement", b =>
                {
                    b.Property<int>("AbonnementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AbonnementId"));

                    b.Property<string>("AbonnementType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<int>("MaxMedewerkers")
                        .HasColumnType("int");

                    b.Property<int>("MaxVoertuigen")
                        .HasColumnType("int");

                    b.HasKey("AbonnementId");

                    b.ToTable("Abonnementen");

                    b.HasDiscriminator<string>("AbonnementType").HasValue("BaseAbonnement");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Accounts.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wachtwoord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("AccountType").HasValue("BaseAccount");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Adres", b =>
                {
                    b.Property<int>("AdresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdresId"));

                    b.Property<string>("Gemeente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Huisnummer")
                        .HasColumnType("int");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Straatnaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Woonplaats")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdresId");

                    b.ToTable("Adressen");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Bedrijf", b =>
                {
                    b.Property<int>("BedrijfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BedrijfId"));

                    b.Property<int>("AbonnementId")
                        .HasColumnType("int");

                    b.Property<int>("BedrijfAdres")
                        .HasColumnType("int");

                    b.Property<string>("Bedrijfsnaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domeinnaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KvkNummer")
                        .HasColumnType("int");

                    b.HasKey("BedrijfId");

                    b.HasIndex("AbonnementId");

                    b.ToTable("Bedrijven");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Reservering", b =>
                {
                    b.Property<int>("ReserveringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReserveringId"));

                    b.Property<string>("AardVanReis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("AccountZakelijkAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Begindatum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Einddatum")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBetaald")
                        .HasColumnType("bit");

                    b.Property<int>("Rijbewijsnummer")
                        .HasColumnType("int");

                    b.Property<double>("TotaalPrijs")
                        .HasColumnType("float");

                    b.Property<string>("VersteBestemming")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VerwachteHoeveelheidkm")
                        .HasColumnType("int");

                    b.HasKey("ReserveringId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountZakelijkAccountId");

                    b.ToTable("Reserveringen");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Voertuigen.Reparatie", b =>
                {
                    b.Property<int>("ReparatieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReparatieId"));

                    b.Property<string>("Beschrijving")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Opmerkingen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReparatieDatum")
                        .HasColumnType("datetime2");

                    b.HasKey("ReparatieId");

                    b.ToTable("Reparaties");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Voertuigen.Voertuig", b =>
                {
                    b.Property<int>("VoertuigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoertuigId"));

                    b.Property<int>("Aanschafjaar")
                        .HasColumnType("int");

                    b.Property<string>("Kenteken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kleur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Merk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Prijs")
                        .HasColumnType("int");

                    b.Property<string>("VoertuigStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoertuigType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("VoertuigId");

                    b.ToTable("Voertuigen");

                    b.HasDiscriminator<string>("VoertuigType").HasValue("BaseVoertuig");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Abonnementen.PayAsYouGo", b =>
                {
                    b.HasBaseType("WPRRewrite.Modellen.Abonnementen.Abonnement");

                    b.HasDiscriminator().HasValue("PayAsYouGo");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Abonnementen.UpFront", b =>
                {
                    b.HasBaseType("WPRRewrite.Modellen.Abonnementen.Abonnement");

                    b.HasDiscriminator().HasValue("UpFront");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Accounts.AccountMedewerker", b =>
                {
                    b.HasBaseType("WPRRewrite.Modellen.Accounts.Account");

                    b.HasDiscriminator().HasValue("MedewerkerAccount");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Accounts.AccountParticulier", b =>
                {
                    b.HasBaseType("WPRRewrite.Modellen.Accounts.Account");

                    b.Property<int>("AdresId")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefoonnummer")
                        .HasColumnType("int");

                    b.HasIndex("AdresId");

                    b.HasDiscriminator().HasValue("ParticulierAccount");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Accounts.AccountZakelijk", b =>
                {
                    b.HasBaseType("WPRRewrite.Modellen.Accounts.Account");

                    b.Property<int>("BedrijfId")
                        .HasColumnType("int");

                    b.HasIndex("BedrijfId");

                    b.HasDiscriminator().HasValue("ZakelijkAccount");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Voertuigen.Auto", b =>
                {
                    b.HasBaseType("WPRRewrite.Modellen.Voertuigen.Voertuig");

                    b.HasDiscriminator().HasValue("Auto");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Voertuigen.Camper", b =>
                {
                    b.HasBaseType("WPRRewrite.Modellen.Voertuigen.Voertuig");

                    b.HasDiscriminator().HasValue("Camper");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Voertuigen.Caravan", b =>
                {
                    b.HasBaseType("WPRRewrite.Modellen.Voertuigen.Voertuig");

                    b.HasDiscriminator().HasValue("Caravan");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Accounts.AccountMedewerkerBackoffice", b =>
                {
                    b.HasBaseType("WPRRewrite.Modellen.Accounts.AccountMedewerker");

                    b.HasDiscriminator().HasValue("BackofficeAccount");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Accounts.AccountMedewerkerFrontoffice", b =>
                {
                    b.HasBaseType("WPRRewrite.Modellen.Accounts.AccountMedewerker");

                    b.HasDiscriminator().HasValue("FrontofficeAccount");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Accounts.AccountZakelijkBeheerder", b =>
                {
                    b.HasBaseType("WPRRewrite.Modellen.Accounts.AccountZakelijk");

                    b.HasDiscriminator().HasValue("ZakelijkBeheerder");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Accounts.AccountZakelijkHuurder", b =>
                {
                    b.HasBaseType("WPRRewrite.Modellen.Accounts.AccountZakelijk");

                    b.HasDiscriminator().HasValue("ZakelijkHuurder");
                });

            modelBuilder.Entity("ReserveringVoertuig", b =>
                {
                    b.HasOne("WPRRewrite.Modellen.Voertuigen.Voertuig", null)
                        .WithMany()
                        .HasForeignKey("GereserveerdeVoertuigenVoertuigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WPRRewrite.Modellen.Reservering", null)
                        .WithMany()
                        .HasForeignKey("ReserveringenReserveringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Bedrijf", b =>
                {
                    b.HasOne("WPRRewrite.Modellen.Abonnementen.Abonnement", "Abonnement")
                        .WithMany()
                        .HasForeignKey("AbonnementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Abonnement");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Reservering", b =>
                {
                    b.HasOne("WPRRewrite.Modellen.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WPRRewrite.Modellen.Accounts.AccountZakelijk", null)
                        .WithMany("Reserveringen")
                        .HasForeignKey("AccountZakelijkAccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Accounts.AccountParticulier", b =>
                {
                    b.HasOne("WPRRewrite.Modellen.Adres", "Adres")
                        .WithMany()
                        .HasForeignKey("AdresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adres");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Accounts.AccountZakelijk", b =>
                {
                    b.HasOne("WPRRewrite.Modellen.Bedrijf", "Bedrijf")
                        .WithMany("BevoegdeMedewerkers")
                        .HasForeignKey("BedrijfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bedrijf");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Bedrijf", b =>
                {
                    b.Navigation("BevoegdeMedewerkers");
                });

            modelBuilder.Entity("WPRRewrite.Modellen.Accounts.AccountZakelijk", b =>
                {
                    b.Navigation("Reserveringen");
                });
#pragma warning restore 612, 618
        }
    }
}
